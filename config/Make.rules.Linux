# Copyright (c) ZeroC, Inc.

known_distributions             := rhel fedora debian ubuntu

# Assign the linux_ids from the ID and ID_LIKE variables in /etc/os-release if available.
linux_ids                       := $(if $(wildcard /etc/os-release),$(shell . /etc/os-release && echo $${ID} $${ID_LIKE}),)

# Assign the linux_id to the first known distribution in the linux_ids list, or for unknown distributions to the first
# element in the linux_ids list.
linux_id                        ?= $(firstword $(or $(filter $(known_distributions),$(linux_ids)),$(linux_ids)))

is-bin-program                  = $(and $(filter $(bindir)%,$($4_targetdir)),$(filter $($1_target),program))

ifneq ($(and $(filter rhel fedora,$(linux_id)),$(filter x86_64 i%86,$(shell uname -m))),)

#
# MultiLib Linux (x64 libraries go in the lib64 directory, x86 executable names are suffixed with 32)
#
supported-platforms     = x64 x86
multilib-platform       = yes

# We filter out -m32, -m64, because Slice compilers are always build as 64bit executables, and we set
# the correct value for each arch build below. We also filter out -march setting to ensure our x86 builds
# target x86-64 capable processor.

ifeq ($(OPTIMIZE),yes)
# Use default system packaging flags if building with OPTIMIZE and CXXFLAGS/LDFLAGS aren't defined.
opt-cppflags = $(if $(CXXFLAGS),,$(filter-out -m32 -m64 -march=%,$(shell setarch $1 rpm --eval %optflags)))
opt-ldflags  = $(if $(LDFLAGS),,$(shell setarch $1 rpm --eval %?__global_ldflags))
endif

CXXFLAGS                := $(filter-out -m32 -m64 -march=%, $(CXXFLAGS))
LDFLAGS                 := $(filter-out -m32 -m64, $(LDFLAGS))

# Targeting x86-64-v2, compatible with most x86-64 processors. This matches the defaults in RHEL 9 x86-64 builds.
# https://developers.redhat.com/blog/2021/01/05/building-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level

x64_cppflags            := $(call opt-cppflags,x86_64) -m64 -march=x86-64-v2
x64_ldflags             := $(call opt-ldflags,x86_64) -m64
x64_targetdir           = $(if $(filter %/build,$5),/x64,$(if $(filter-out $($1_target),program),64))
x64_installdir          = $(if $(and $(filter-out $($1_target),program),$(if $5,$(filter-out %64,$5),true)),64)
x64_cmakedir            = /cmake

x86_cppflags            := $(call opt-cppflags,i386) -m32 -march=x86-64-v2
x86_ldflags             := $(call opt-ldflags,i386) -m32
x86_targetdir           = $(if $(filter %/build,$5),/x86)
x86_targetname          = $(if $(is-bin-program),32)
x86_cmakedir            = /cmake

# No Slice translators for x86
x86_excludes            = slice2%

else ifneq ($(filter debian ubuntu,$(linux_id)),)

# MultiArch Linux (libraries are installed in lib/<arch>, executables are installed in bin/<arch> except for the build
# architecture where executables are installed in bin/).
build-platform          ?= $(shell dpkg --print-architecture)
foreign-platforms       ?= $(shell dpkg --print-foreign-architectures)

supported-platforms     = $(build-platform) $(foreign-platforms)

dpkg-arch               = $(shell dpkg-architecture -f -a$1 -q$2 2> /dev/null)

ifeq ($(OPTIMIZE),yes)
# Use default system packaging flags if building with OPTIMIZE and CXXFLAGS/LDFLAGS aren't defined.
opt-cppflags    = $(if $(CXXFLAGS),,$(shell dpkg-buildflags --get CXXFLAGS) $(shell dpkg-buildflags --get CPPFLAGS))
opt-ldflags     = $(if $(LDFLAGS),,$(shell DEB_BUILD_MAINT_OPTIONS=hardening=+bindnow dpkg-buildflags --get LDFLAGS))
endif

# $(call make-platform-config,$1=platform)
define make-platform-config
$1_gnu_type     = $(call dpkg-arch,$1,DEB_HOST_GNU_TYPE)
$1_multiarch    = $(call dpkg-arch,$1,DEB_HOST_MULTIARCH)

$1_cc           = $$($1_gnu_type)-$(CC)
$1_cxx          = $$($1_gnu_type)-$(CXX)
$1_libtool      = $$($1_gnu_type)-$(AR)
$1_targetdir    = /$$($1_multiarch)
$1_objdir       = /$$($1_multiarch)
$1_installdir   = $$(if $$(and $(is-bin-program),$(usr_dir_install)),,/$$($1_multiarch))
$1_cmakedir     = /$$($1_multiarch)/cmake

#
# Disable ABI compatibility warnings for armhf using -Wno-psabi
#
$1_cppflags     = $(opt-cppflags) $(if $(filter $1,armhf),-Wno-psabi)
$1_ldflags      = $(opt-ldflags)
endef

$(foreach p,$(supported-platforms),$(eval $(call make-platform-config,$p)))

# For the build platform architecture, build and install executables in bin, libraries in lib/<arch>
$(build-platform)_targetdir     = $(if $(or $(filter %/build,$5),$(filter-out $($1_target),program)),/$($2_multiarch))
$(build-platform)_installdir    = $(if $(is-bin-program),,/$($2_multiarch))

else

#
# Single architecture Linux
#
ifeq ($(OPTIMIZE),yes)
    # Use default system packaging flags if building with OPTIMIZE and CXXFLAGS/LDFLAGS aren't defined.
    opt-cppflags = $(if $(CXXFLAGS),,$(shell setarch $1 rpm --eval %optflags))
    opt-ldflags  = $(if $(LDFLAGS),,$(shell setarch $1 rpm --eval %?__global_ldflags))
endif

build-platform                  = $(if $(filter arm%,$(shell uname -m)),arm,$(shell uname -m))
supported-platforms             = $(build-platform)
lib-suffix                      = $(if $(filter %64,$(build-platform)),64,)

$(build-platform)_cppflags      := $(call opt-cppflags,$(build-platform))
$(build-platform)_ldflags       := $(call opt-ldflags,$(build-platform))
$(build-platform)_targetdir     = $(if $(filter %/build,$5),/$(build-platform),$(if $(filter-out $($1_target),program),$(lib-suffix)))
$(build-platform)_installdir    = $(if $(and $(filter-out $($1_target),program),$(if $5,$(filter-out %$(lib-suffix),$5),true)),$(lib-suffix))
$(build-platform)_cmakedir      = /cmake

endif

rpath-link-ldflag       = -Wl,-rpath-link,$1
make-rpath-link-ldflags = $(foreach d,$(filter-out $2,$(call get-all-deps,$1)),$(call rpath-link-ldflag,$($d_targetdir)))

# If building objects for a shared library build, add -fPIC or -fPIE.
# gcc in most Linux distribution is configured with --enable-default-pie, which is equivalent to auto-adding -fPIE -pie:
# https://gcc.gnu.org/install/configure.html
# We pass these options explicitly in case the gcc we use is not configured with --enable-default-pie.
shared_cppflags = $(if $(filter-out program,$($1_target)),-fPIC,-fPIE)
shared_objdir   = $(if $(filter-out program,$($1_target)),obj/pic,obj/pie)

# If we are linking a program, add -rpath-link to locate secondary libraries that aren't linked with the executable.
shared_ldflags      = $(if $(filter-out program,$($1_target)),\
        $(if $(filter yes,$(allow-undefined-symbols)),,-Wl$(comma)--no-undefined),\
        -pie $(if $(filter yes,$(new_dtags)),-Wl$(comma)--enable-new-dtags,-Wl$(comma)--disable-new-dtags) \
        $$(call unique,$$(foreach d,$($4_dependencies),$$(call make-rpath-link-ldflags,$$d,$($4_dependencies)))))

# We use the same obj/pie directory as the shared build since all the flags are the same.
static_cppflags = -fPIE
static_objdir   = obj/pie
static_ldflags  = -pie

# Link the Slice compilers without any shared library at all.
fully_static_ldflags = -static

cppflags        = -fvisibility=hidden -Wall -Wextra -Wredundant-decls -Wshadow -Wdeprecated -Werror -pthread \
                  $(if $(filter yes,$(OPTIMIZE)),-DNDEBUG,-g)
ldflags         = -pthread

# As of GCC 13.4, https://gcc.gnu.org/projects/cxx-status.html#cxx20 still describes C++20 support as "experimental".
cppflags       += -std=c++17

nodeprecatedwarnings-cppflags := -Wno-deprecated-declarations
nounusedparameter-cppflags    := -Wno-unused-parameter

loader_path     = \$$ORIGIN

# $(call mklib,$1=target,$2=objects,$3=libname,$4=version,$5=soversion,$6=ldflags,$7=platform)
mklib           = $(or $($7_ar),$(AR)) cr $1 $2

# $(call mkshlib,$1=target,$2=objects,$3=libname,$4=version,$5=soversion,$6=ldflags,$7=platform)
mkshlib         = $(or $($7_cxx),$(CXX)) -shared $(if $5,-Wl$(comma)-h$(comma)$(call mksoname,$3,$4,$5)) -o $1 $2 $6

#
# $(call mkxxx,$1=libname,$2=version,$3=soversion)
#
mksoname        = lib$(1).so$(if $3,.$3)
mkshlibfilename = lib$(1).so$(if $2,.$2)
mkshlibname     = lib$(1).so

# Clear the iconv ldflags, iconv is part of libc on Linux
iconv_ldflags   :=

ifneq ($(OPTIMIZE),yes)
libbacktrace_fullpath := $(shell $(CXX) --print-file-name=libbacktrace.a)
ifneq ($(libbacktrace_fullpath),libbacktrace.a)
   libbacktrace = yes
endif
endif

IceUtil_system_libs                             = -lrt $(if $(filter yes,$(libbacktrace)),-lbacktrace)
Ice_system_libs                                 = -ldl -lssl -lcrypto $(IceUtil_system_libs)
ifeq ($(shell pkg-config --exists libsystemd 2> /dev/null && echo yes),yes)
Ice_system_libs                                 += $(shell pkg-config --libs libsystemd)
endif

glacier2router_system_libs    = -lcrypt
icegridregistry_system_libs   = -lcrypt
icegridnode_system_libs       = -lcrypt

icegridadmin_system_libs                        = -ledit
icestormadmin_system_libs                       = -ledit

# If BlueZ and DBus are installed, set the IceBT system libraries.
# The build system uses this variable to determine whether or not to build the IceBT targets.
ifeq ($(shell pkg-config --exists bluez dbus-1 2> /dev/null && echo yes),yes)
IceBT_system_libs = $(shell pkg-config --libs dbus-1)
endif
