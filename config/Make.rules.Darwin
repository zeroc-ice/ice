# Copyright (c) ZeroC, Inc.

supported-platforms             = macosx iphoneos iphonesimulator

xcframeworks                    = Ice IceDiscovery IceLocatorDiscovery

macosx_ar                       = libtool
macosx_cppflags                 = -mmacosx-version-min=14.00
macosx_ldflags                  = $(macosx_cppflags) \
                                  $(if $(filter yes, $(allow-undefined-symbols)),-undefined dynamic_lookup,)
macosx_targetdir                = $(if $(filter %/build,$5),/macosx)
macosx_cmakedir                 = /cmake

iphoneos_ar                     = libtool
iphoneos_cc                     = xcrun -sdk iphoneos clang
iphoneos_cxx                    = xcrun -sdk iphoneos clang++
iphoneos_cppflags               = -miphoneos-version-min=15.0 -arch arm64 -fembed-bitcode
iphoneos_ldflags                = -miphoneos-version-min=15.0 -arch arm64
iphoneos_configs                = %static
iphoneos_targetdir              = /iphoneos
# TODO: disable all install for this platform
iphoneos_installdir             = /iphoneos
iphoneos_components             = $(xcframeworks) $(iostest_components)
iphoneos_targetrule             = $(iostest_targetrule)
iphoneos_excludes               = $(iostest_excludes)

iphonesimulator_ar              = libtool
iphonesimulator_cc              = xcrun -sdk iphonesimulator clang
iphonesimulator_cxx             = xcrun -sdk iphonesimulator clang++
iphonesimulator_cppflags        = -mios-simulator-version-min=15.0
iphonesimulator_ldflags         = $(iphonesimulator_cppflags)
iphonesimulator_configs         = %static
iphonesimulator_targetdir       = /iphonesimulator
# TODO: disable all install for this platform
iphonesimulator_installdir      = /iphonesimulator
iphonesimulator_components      = $(xcframeworks) $(iostest_components)
iphonesimulator_targetrule      = $(iostest_targetrule)
iphonesimulator_excludes        = $(iostest_excludes)

ifneq ($(shell command -v brew 2> /dev/null),)
MCPP_HOME                      ?= $(shell brew --prefix mcpp)
LMDB_HOME                      ?= $(shell brew --prefix lmdb)
endif

# Always link with the static version of libmcpp on macos.
mcpp_ldflags                   := $(MCPP_HOME)/lib/libmcpp.a

# On macos, objects are always PIC/PIE, and executables are always PIE. So there is no need to pass -fPIC or -fPIE to
# the compiler.
cppflags        = -fvisibility=hidden -Wall -Wextra -Wshadow -Wshadow-all -Wredundant-decls -Wno-shadow-field \
                  -Wdeprecated -Wstrict-prototypes -Werror -Wconversion -Wdocumentation -Wno-shadow-uncaptured-local \
                  -Wreorder-init-list -pthread \
                  $(if $(filter yes,$(OPTIMIZE)),-O2 -DNDEBUG,-g) \
                  -std=c++20

# When we export an API from a shared library, we check for weak vtables. This flag also works for static
# libraries/exes, but is not necessary.
api_exports_cppflags = -Wweak-vtables

# We compile static and shared with the same flags so we want their .o to share directories.
static_objdir   = obj
shared_objdir   = obj

nodeprecatedwarnings-cppflags := -Wno-deprecated-declarations
nounusedparameter-cppflags    := -Wno-unused-parameter

loader_path     = @loader_path

# $(call machoversion,$1=version)
machoversion    = $(subst b,.6,$(subst a,.5,$1))

# $(call mklib,$1=target,$2=objects,$3=libname,$4=version,$5=soversion,$6=ldflags,$7=platform)
mklib           = $(or $($7_ar),$(AR)) -static -no_warning_for_no_symbols -o $1 $2

# $(call mkshlib,$1=target,$2=objects,$3=libname,$4=version,$5=soversion,$6=ldflags,$7=platform)
mkshlib         = $(or $($7_cxx),$(CXX)) -dynamiclib $(if $5,-install_name @rpath/$(call mkshlibfilename,$3,$4,$5))\
                  $(if $4,-current_version $(call machoversion,$4) -compatibility_version \
                     $(call machoversion,$(if $(filter $4,$(version)),$(compatversion),$4))) \
                  -o $1 $2 $6

# system install directory
system-install-dir = /usr/local

#
# $(call mkxxx,$1=libname,$2=version,$3=soversion)
#
mkshlibfilename   = lib$1$(if $3,.$3).dylib
mkshlibname       = lib$1.dylib
mkshlibnametarget = $(mkshlibfilename)

mkpymodulename  = $1.so
mkrbmodulename  = $1.bundle
mkphpmodulename = $1.so

escape-ldflags   = $(subst -framework$(space),-framework+,$1)
unescape-ldflags = $(subst -framework+,-framework$(space),$1)

#
# System libraries
#
Ice_system_libs := -ldl

# Frameworks for macos
Ice[macosx]_system_libs := -framework Security -framework CoreFoundation

# Frameworks requires for iphoneos
Ice[iphoneos]_system_libs := -framework CFNetwork -framework UIKit -framework Foundation -framework Security
IceIAP[iphoneos]_system_libs := -framework ExternalAccessory

# Same frameworks as iphoneos for iphonesimulator
Ice[iphonesimulator]_system_libs := $(Ice[iphoneos]_system_libs)
IceIAP[iphonesimulator]_system_libs := $(IceIAP[iphoneos]_system_libs)

icegridadmin[macosx]_system_libs := -ledit -lncurses
icestormadmin[macosx]_system_libs := -ledit -lncurses

glacier2router[macosx]_system_libs := $(Ice[macosx]_system_libs)
icegridregistry[macosx]_system_libs := $(Ice[macosx]_system_libs)
icegridnode[macosx]_system_libs := $(Ice[macosx]_system_libs)

is-iostest-program             = $(and $(filter-out macosx,$2),$(filter test/%,$1))
iostest_targetrule             = $(if $(is-iostest-program),iostest,)

iostest_components             = TestCommon \
    test/Ice/% \
    test/IceSSL/% \
    test/IceDiscovery/% \
    test/IceLocatorDiscovery/%

iostest_excludes       = $(addprefix test/Ice/,\
    background \
    faultTolerance \
    gc \
    logger \
    properties \
    services \
    stringConverter \
    threadPoolPriority)

#
# Rule to build an iOS bundle for testing (this is used for packaging client/server programs)
#
define make-iostest-program
$2/$1.bundle/Info.plist:
	$(Q)if [ ! -f $2/$1.bundle/Info.plist ] ; \
	then \
	    $(MKDIR) -p $2/$1.bundle ; \
	    sed "s/NAME/$1/" test/ios/bundles/BundleInfo.plist > $2/$1.bundle/Info.plist ; \
	fi

$2/$1.bundle/$1.dylib: $5 $2/$1.bundle/Info.plist $(foreach d,$6,$($d_targets))
	$(E) "Linking [$8-$9] $$@"
	$(Q)$(RM) $2/$1.bundle/$1.dylib
	$(Q)$(or $($8_cxx),$(platform_cxx)) -bundle $(LDFLAGS) -o $2/$1.bundle/$1.dylib $5 $(strip $7)
endef

get-iostest-program-targets = $2/$1.bundle/$1.dylib $2/$1.bundle/Info.plist

## Xcode projects

#
# $(call make-xcode-project-with-config,$1=project,$2=platform,$3=config)
#
define make-xcode-project-with-config

$1/.translator-$2-$3.dep: $$($$($1_slicecompiler)_path)
	$(Q)if [ -f $1/.translator-$2-$3.dep ]; \
	then \
	    xcodebuild -sdk $2 \
	           -project "$1/$$(call $1_project,$2,$3)" \
	           -configuration "$$(call $1_configuration,$2,$3)" \
		   -scheme "$$(call $1_scheme,$2,$3)" \
		   $(if $(V),,-quiet) \
		   clean; \
	fi
	touch $1/.translator-$2-$3.dep

$1[$2-$3]: $$($1_dependencies) $1/.translator-$2-$3.dep
	$(E) "Running xcodebuild for $1 scheme=\"$$(call $1_scheme,$2,$3)\""
	$(Q)xcodebuild -sdk $2 \
	           -project "$1/$$(call $1_project,$2,$3)" \
	           -configuration "$$(call $1_configuration,$2,$3)" \
		   -scheme "$$(call $1_scheme,$2,$3)" \
		   $(if $(V),,-quiet) \
		   $(if $(PLATFORM_NAME),iphonesimulator,-arch `uname -m`) \
		   build

$1[$2-$3]_clean:
	$(E) "Cleaning $1"
	$(Q)xcodebuild -sdk $2 \
	           -project "$1/$$(call $1_project,$2,$3)" \
	           -configuration "$$(call $1_configuration,$2,$3)" \
		   -scheme "$$(call $1_scheme,$2,$3)" \
		   $(if $(V),,-quiet) \
		   clean

$1:: $1[$2-$3]
$1_clean:: $1[$2-$3]_clean

endef

#
# $(call make-xcode-project,$1=project)
#
define make-xcode-project

#
# Define per-<platform-config> rules for this component.
#
$$(foreach p,$$(filter $(platforms),$$($1_platforms)),\
    $$(foreach c,$$(filter $$(or $$($$p_configs),%),$$(filter $(configs),$$($1_configs))),\
        $$(if $$(filter $(SKIP),$1[$$p-$$c]),,\
            $$(eval $$(call make-xcode-project-with-config,$1,$$p,$$c,$1[$$p-$$c])))))

$1::
$1_clean::
$1_distclean::
	$(Q)$(RM) -r $1/build

all:: $1
clean:: $1_clean
distclean:: $1_distclean
endef
