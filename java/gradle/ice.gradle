// Copyright (c) ZeroC, Inc.

buildscript {
    repositories {
        mavenCentral()

        maven {
            url = "https://plugins.gradle.org/m2/"
        }
    }
}

apply plugin: 'checkstyle'
apply plugin: 'org.openrewrite.rewrite'

slice {
    includeSearchPath = files("${project.ext.topSrcDir}/slice")
    def defaultIceToolsPath = "${new File(project.ext.topSrcDir).getCanonicalPath()}/cpp/bin"

    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        def platform = project.findProperty("cppPlatform") ?: "x64"
        def configuration = project.findProperty("cppConfiguration") ?: "Release"
        toolsPath = "$defaultIceToolsPath/$platform/$configuration"
    } else {
        toolsPath = defaultIceToolsPath
    }
}

checkstyle {
    toolVersion = '10.21.4'
}

tasks.named('checkstyleMain') {
    doFirst {
        source = sourceSets.main.allJava.matching {
	    // Exclude generated files
            exclude {
                def path = it.file.toPath().normalize().toString().replace(File.separator, '/')
                if (path.contains("/build/generated")) {
                    return true
                } else if (path.endsWith("/com/zeroc/Ice/PropertyNames.java")) {
                    return true
                }
                return false
            }
        }
    }
}

// Android does not have a compileJava task
if(!(project.hasProperty('android') && project.android.sourceSets)) {
    compileJava {
        // Set the target release using the --release option
        options.compilerArgs.addAll(['--release', "${targetJavaRelease}"])
        options.debug = debug
    }
}

// If the prefix isn't set use these default locations.
if(!prefix) {
    def prefixVersion = iceVersion
    if(prefixVersion.indexOf(".0-alpha")){
        prefixVersion = prefixVersion.replace(".0-alpha", "a")
    } else if(prefixVersion.indexOf(".0-beta")){
        prefixVersion = prefixVersion.replace(".0-beta", "b")
    }
    if(System.properties['os.name'].toLowerCase().contains('windows')) {
        prefix = "C:\\Ice-${prefixVersion}"
    } else {
        prefix = "/opt/Ice-${prefixVersion}"
    }
}

// Installation location for jar/pom & executables.
if((prefix.startsWith("/usr") || prefix.startsWith("/usr/local"))) {
    ext.jarDir = prefix + "/share/java"
    ext.binDir = prefix + "/bin"
} else {
    ext.jarDir = prefix + "/lib"
    ext.binDir = prefix + "/bin"
}

ext.libDir = "$rootProject.projectDir/lib"
