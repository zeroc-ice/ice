// Copyright (c) ZeroC, Inc.

jar {
    destinationDirectory = new File("${libDir}")
}

tasks.named('javadocJar') {
    destinationDirectory = layout.buildDirectory.dir("${libDir}")
}

tasks.named('sourcesJar') {
    destinationDirectory = layout.buildDirectory.dir("${libDir}")
}

javadoc.dependsOn(compileSlice)
javadoc {
    source = sourceSets.main.allJava
    doFirst {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
    failOnError = true
    options.header = project.ext.displayName
    options.addBooleanOption('html5', true)
    options.docTitle = "${project.ext.displayName} ${iceVersion} API Reference"
    destinationDir = file("${buildDir}/docs/javadoc")

    configurations.compileClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        if (artifact.moduleVersion.id.group == "com.zeroc") {
            def artifactProject = project(":${artifact.name}")

            // Add dependency on the Javadoc task of the artifact project
            dependsOn artifactProject.tasks.named("javadoc")

            options.linksOffline(
                "https://code.zeroc.com/ice/main/api/java/${artifactProject.ext.displayName}/",
                "${rootProject.projectDir}/src/${artifactProject.ext.moduleName}/build/docs/javadoc")
        }
    }
 }
project.ext.pomName = "${libDir}/${project.name}-${project.version}.pom"
apply from: "$project.ext.topSrcDir/java/gradle/maven-publish.publishing.gradle"

tasks.named('assemble') {
    dependsOn tasks.named('jar'), tasks.named('sourcesJar'), tasks.named('javadocJar')
}

jar {
    manifest {
        attributes("Class-Path": configurations.runtimeClasspath.resolve().collect{ "${it.name}" }.join(' '))
    }
}

if(project.name == "icebox") {
    jar {
        manifest {
            attributes("Main-Class": "com.zeroc.IceBox.Server")
        }
    }
}

clean {
    delete("${libDir}/${project.name}-${project.version}.jar")
    delete("${libDir}/${project.name}-${project.version}-sources.jar")
    delete("${libDir}/${project.name}-${project.version}-javadoc.jar")
    delete(project.ext.pomName)
}

task installJars(type: Copy, dependsOn: assemble) {
    from "${project.ext.pomName}"
    from "${libDir}/${project.name}-${project.version}.jar"
    from "${libDir}/${project.name}-${project.version}-sources.jar"
    into "${DESTDIR}${jarDir}"
}
task install(dependsOn: installJars)
