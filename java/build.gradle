// Copyright (c) ZeroC, Inc.

plugins {
    id 'com.zeroc.ice.slice-tools' apply false
    id 'checkstyle'
    id 'org.openrewrite.rewrite' version '7.3.0'
}

allprojects {
    repositories {
        mavenCentral()
    }
}

// Defines and initializes enableCodeAnalysis to the corresponding property in gradle.properties.
def enableCodeAnalysis = project.property('enableCodeAnalysis').toBoolean()

subprojects {
    project.ext.topSrcDir = "$rootProject.projectDir/.."

    project.version = iceVersion
    project.group = "com.zeroc"

    apply plugin: 'checkstyle'
    apply plugin: 'java'
    apply plugin: 'com.zeroc.ice.slice-tools'
    apply from: "$rootProject.projectDir/gradle/ice.gradle"

    repositories {
        mavenCentral()
    }

    java {
        // The corresponding -source and -target javac options are suppressed by gradle when
        // --release is set through options.compileArgs (see above).
        sourceCompatibility = "1.${targetJavaRelease}"
        targetCompatibility = "1.${targetJavaRelease}"
    }

    jar {
        manifest {
            attributes("Built-By": "ZeroC, Inc.")
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:-options"
        options.encoding = "UTF-8"
        options.deprecation = true
    }

    // We want Checkstyle to generally run after Rewrite and to exclude files generated from Slice.
    // You need to use -PenableCodeAnalysis to be able to invoke the checkstyle, rewriteRun, and rewriteDryRun tasks
    // The tasks still need to be manually called if nothing else invokes them.
    tasks.withType(Checkstyle) {
        task ->
            task.enabled = enableCodeAnalysis
        dependsOn(rewriteDryRun)
        exclude(
            '**/generated/**'
        )
    }

}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task dist()
dist.dependsOn(project(":ice").assemble)
dist.dependsOn(project(":glacier2").assemble)
dist.dependsOn(project(":icegrid").assemble)
dist.dependsOn(project(":icebox").assemble)
dist.dependsOn(project(":icebt").assemble)
dist.dependsOn(project(":icediscovery").assemble)
dist.dependsOn(project(":icelocatordiscovery").assemble)
dist.dependsOn(project(":icestorm").assemble)
dist.dependsOn(project(":IceGridGUI").assemble)

project(":test").compileJava.dependsOn(dist)

def exportedProjects = [
    ":glacier2",
    ":ice",
    ":icebox",
    ":icebt",
    ":icegrid",
    ":icestorm"
]

task alljavadoc(type: Javadoc) {
    // Add the source files from all subprojects
    source = exportedProjects.collect { project(it).sourceSets.main.allJava }
    // Output directory for the aggregated Javadocs
    destinationDir = file("$buildDir/docs/javadoc")
    options.encoding = 'UTF-8'
    // Where to find source files for the different modules
    options.addStringOption('-module-source-path', './src/*/src/main/java/:./src/*/build/generated/source/slice/main')
    options.addBooleanOption('html5', true)
    options.header = 'Ice for Java'
    options.docTitle = "Ice ${iceVersion} API Reference"
}
alljavadoc.dependsOn = exportedProjects.collect { project(it).assemble.dependsOn }

checkstyle {
    toolVersion = '10.21.4'
    ignoreFailures = false
    showViolations = true
}

rewrite {
    activeRecipe(
        'org.openrewrite.staticanalysis.RemoveCallsToObjectFinalize',
        'org.openrewrite.staticanalysis.DefaultComesLast',
        'org.openrewrite.java.RemoveUnusedImports',
        'org.openrewrite.java.format.NormalizeFormat',
        'org.openrewrite.java.format.BlankLines',
        'org.openrewrite.java.format.Spaces',
        'org.openrewrite.java.format.NormalizeTabsOrSpaces',
        'org.openrewrite.java.format.TabsAndIndents',
        'org.openrewrite.java.format.NormalizeLineBreaks',
        'org.openrewrite.java.format.RemoveTrailingWhitespace',
        'org.openrewrite.staticanalysis.CodeCleanup'
    )
    checkstyleConfigFile = file("config/checkstyle/checkstyle.xml")
    activeStyle('com.zeroc.IceRewriteRules')
    setExportDatatables(true)
    exclusion(
        // OpenRewrite is technically capable of modifying Groovy and Kotlin files, but we are avoiding this for now.
        '**/*.gradle',
        '**/*.kts',
        // I have been explicitly instructed not to modify the below file.
        'com/zeroc/Ice/PropertyNames.java',
        // These are all generated files, and thus should not be subject to modification from OpenRewrite.
        '**/generated/**/*',
        // The following four files all have issues regarding the import shortener because of Ice object names.
        'java/src/com.zeroc.ice/src/main/java/com/zeroc/Ice/Properties.java',
        'java/src/com.zeroc.ice/src/main/java/com/zeroc/Ice/InputStream.java',
        'java/src/IceGridGUI/src/main/java/com/zeroc/IceGridGUI/LiveDeployment/ShowIceLogDialog.java',
        'java/src/IceGridGUI/src/main/java/com/zeroc/IceGridGUI/LiveDeployment/ShowLogFileDialog.java',
        // This file is never effectively fixed by OpenRewrite, yet OpenRewrite continually attempts to reformat it.
        'java/test/src/main/java/test/Ice/operations/Twoways.java',
    )
}

dependencies {
    rewrite(
        "org.openrewrite.recipe:rewrite-static-analysis:2.5.1",
        "org.openrewrite.recipe:rewrite-java-dependencies:1.31.0"
    )
}

// You need to use -PenableCodeAnalysis to be able to invoke the checkstyle, rewriteRun, and rewriteDryRun tasks.
// The tasks still need to be manually called if nothing else invokes them.
tasks.named('rewriteDryRun') {
    task ->
        task.enabled = enableCodeAnalysis
    rewrite.failOnDryRunResults = true
}

tasks.named('rewriteRun') {
    task ->
        task.enabled = enableCodeAnalysis
}
