name: "Build .NET Packages"

on:
  workflow_call:
    inputs:
      ice_version:
        required: false
        type: string
      source_url:
        required: false
        type: string
    secrets:
      NUGET_API_KEY:
        required: false
  workflow_dispatch:
    inputs:
      ice_version:
        description: "The Ice version to build"
        required: false
      source_url:
        description: "The URL of the NuGet repository to publish to"
        required: false
        type: string

jobs:
  build-slice-compilers:
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: macos-arm64
            artifact-path: cpp/bin/slice2cs
          - os: windows-latest
            target: windows-x64
            artifact-path: cpp/bin/x64/Release/slice2cs.*
          - os: ubuntu-24.04
            target: linux-x64
            artifact-path: cpp/bin/slice2cs
          - os: ubuntu-24.04-arm
            target: linux-arm64
            artifact-path: cpp/bin/slice2cs

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Dependencies
        uses: ./.github/actions/setup-dependencies

      - name: Build Compiler
        uses: ./.github/actions/build-slice-compiler
        with:
          compiler-name: slice2cs

      - name: Upload Compiler Artifact
        uses: actions/upload-artifact@v4
        with:
          name: slice2cs-${{ matrix.target }}
          path: ${{ matrix.artifact-path }}

  pack-dotnet:
    runs-on: windows-latest
    needs: build-slice-compilers

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download All Compiler Artifacts
        uses: actions/download-artifact@v4

      - name: Copy slice2cs binaries to staging path
        run: |
          @("macos-arm64", "linux-x64", "linux-arm64", "windows-x64") | ForEach-Object { New-Item -ItemType Directory -Path $env:GITHUB_WORKSPACE\tools -Name $_ }
          Copy-Item "slice2cs-macos-arm64\slice2cs" -Destination "$env:GITHUB_WORKSPACE\tools\macos-arm64"
          Copy-Item "slice2cs-linux-x64\slice2cs" -Destination "$env:GITHUB_WORKSPACE\tools\linux-x64"
          Copy-Item "slice2cs-linux-arm64\slice2cs" -Destination "$env:GITHUB_WORKSPACE\tools\linux-arm64"
          Copy-Item "slice2cs-windows-x64\slice2cs.exe" -Destination "$env:GITHUB_WORKSPACE\tools\windows-x64"

          # Copy the compiler to the expected location to avoid rebuilding it when creating the NuGet packages
          New-Item -ItemType Directory -Path "$env:GITHUB_WORKSPACE\cpp\bin\x64\Release"
          Copy-Item "slice2cs-windows-x64\slice2cs.exe" -Destination "$env:GITHUB_WORKSPACE\cpp\bin\x64\Release"

      # The .NET NuGet package includes bzip2 DLLs from the C++ Windows distribution for protocol compression
      - name: Restore C++ dependencies
        run: nuget restore cpp/msbuild/ice.sln

      - name: Pack .NET Packages
        run: dotnet msbuild csharp\msbuild\ice.proj /t:Pack /p:Configuration=Release /p:IcePackageVersion="${{ inputs.ice_version }}"
        env:
          SLICE2CS_STAGING_PATH: "${{ github.workspace }}\\tools"

      - name: Upload NuGet Packages
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-nuget-packages
          path: |
            csharp/src/**/bin/Release/*.nupkg
            csharp/src/**/bin/Release/*.snupkg
            tools/ZeroC.Ice.Slice.Tools.CSharp/bin/Release/*.nupkg
            tools/ZeroC.Ice.Slice.Tools.CSharp/bin/Release/*.snupkg

      - name: Publish NuGet Packages
        run: |
          $packages = @(
              Get-ChildItem -Path csharp -Filter "*.nupkg" -File -Recurse
              Get-ChildItem -Path csharp -Filter "*.snupkg" -File -Recurse
          )

          foreach ($package in $packages) {
              Write-Host "Publishing package: $($package.FullName)"
              dotnet nuget push $package.FullName --source ${{ inputs.source_url }} --api-key ${{ secrets.NUGET_API_KEY }}
              if ($LASTEXITCODE -ne 0) { throw "dotnet nuget push failed" }
          }
        if: inputs.source_url != ''
