name: "Build Maven Packages"

on:
  workflow_call:
    inputs:
      ice_version:
        required: false
        type: string
  workflow_dispatch:
    inputs:
      ice_version:
        description: "The Ice version to build"
        required: false
jobs:
  build-slice-compilers:
    strategy:
      matrix:
        include:
          - os: macos-15
            target: macos-arm64
            artifact-path: cpp/bin/slice2java
          - os: windows-latest
            target: windows-x64
            artifact-path: cpp/bin/x64/Release/slice2java.*
          - os: ubuntu-24.04
            target: linux-x64
            artifact-path: cpp/bin/slice2java
          - os: ubuntu-24.04-arm
            target: linux-arm64
            artifact-path: cpp/bin/slice2java

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup C++
        uses: ./.github/actions/setup-cpp

      - name: Setup Java
        uses: ./.github/actions/setup-java

      - name: Build Compiler
        uses: ./.github/actions/build-slice-compiler
        with:
          compiler-name: slice2java
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Upload Compiler Artifact
        uses: actions/upload-artifact@v4
        with:
          name: slice2java-${{ matrix.target }}
          path: ${{ matrix.artifact-path }}

  build-maven-packages:
    runs-on: ubuntu-24.04
    needs: build-slice-compilers
    env:
      SLICE2JAVA_STAGING_PATH: ${{ github.workspace }}/ice/java/tools/slice-tools/src/main/resources/resources

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: ice

      - name: Download All slice2java Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: slice2java-*

      - name: Copy slice2java binaries to staging path
        run: |
          # Create the staging path.
          mkdir -p "$SLICE2JAVA_STAGING_PATH/macos-arm64" \
                   "$SLICE2JAVA_STAGING_PATH/linux-x64" \
                   "$SLICE2JAVA_STAGING_PATH/linux-arm64" \
                   "$SLICE2JAVA_STAGING_PATH/windows-x64"

          # Copy the slice2java binaries to the staging path.
          cp -v artifacts/slice2java-macos-arm64/slice2java "$SLICE2JAVA_STAGING_PATH/macos-arm64/"
          chmod +x $SLICE2JAVA_STAGING_PATH/macos-arm64/slice2java
          cp -v artifacts/slice2java-linux-x64/slice2java "$SLICE2JAVA_STAGING_PATH/linux-x64/"
          chmod +x $SLICE2JAVA_STAGING_PATH/linux-x64/slice2java
          cp -v artifacts/slice2java-linux-arm64/slice2java "$SLICE2JAVA_STAGING_PATH/linux-arm64/"
          chmod +x $SLICE2JAVA_STAGING_PATH/linux-arm64/slice2java
          cp -v artifacts/slice2java-windows-x64/slice2java.exe "$SLICE2JAVA_STAGING_PATH/windows-x64/"

          # Copy the slice2java binary to the cpp/bin directory to avoid rebuilding it.
          mkdir -p ice/cpp/bin
          cp -v artifacts/slice2java-linux-x64/slice2java $GITHUB_WORKSPACE/ice/cpp/bin/slice2java
          chmod +x $GITHUB_WORKSPACE/ice/cpp/bin/slice2java

          for component in DataStorm Glacier2 Ice IceBox IceGrid IceStorm; do
            mkdir -p $SLICE2JAVA_STAGING_PATH/slice/$component
            cp -v ice/slice/$component/*.ice $SLICE2JAVA_STAGING_PATH/slice/$component
          done

      - name: Update Ice Version
        run: |
          sed -i "s/^iceVersion = .*/iceVersion = ${{ inputs.ice_version }}/" gradle.properties
          sed -i "s/^sliceToolsVersion = .*/sliceToolsVersion = ${{ inputs.ice_version }}/" tools/slice-tools/gradle.properties
        working-directory: ice/java
        if: ${{ inputs.ice_version != '' }}

      - name: Build Ice for Java Packages
        run: |
          cd tools/slice-tools && ../../gradlew build
          ./gradlew dist
        working-directory: ice/java
      - name: Sign Ice for Java Files
        run: |
          set -euo pipefail
          echo "$GPG_KEY" | gpg --batch --import
          find lib tools/slice-tools/build/libs -type f \( -name '*.jar' -o -name '*.pom' \) \
            -exec gpg -u "$GPG_KEY_ID" --armor --detach-sign --batch --yes --output '{}.asc' '{}' \;
        working-directory: ice/java
        env:
          GPG_KEY: ${{ secrets.ICE_3_8_CI_SIGNER_KEY }}
          GPG_KEY_ID: ${{ secrets.ICE_3_8_CI_SIGNER_KEY_ID }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: java-packages
          path: |
            ice/java/lib/*.jar
            ice/java/lib/*.pom
            ice/java/lib/*.asc
            ice/java/tools/slice-tools/build/libs/*.jar
            ice/java/tools/slice-tools/build/libs/*.asc
            ice/java/tools/slice-tools/build/libs/*.pom
