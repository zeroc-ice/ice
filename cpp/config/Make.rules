# Copyright (c) ZeroC, Inc.

#
# Supported configurations
#
supported-configs = shared static
default-configs   = shared

-include        $(lang_srcdir)/config/Make.rules.$(os)
ifeq ($(os),Darwin)
include         $(lang_srcdir)/config/Make.xcframework.rules
endif

# Validate platforms and configs
$(eval $(call validate-config))

#
# Define which projects to build for the different configurations.
#
coreandstub_components  = IceUtil \
                          Ice \
                          IceDiscovery \
                          IceLocatorDiscovery \
                          Glacier2 \
                          IceStorm \
                          IceGrid \
                          IceBox

# Add the Bluetooth transport if Bluetooth system libraries are available
ifneq ($(IceBT_system_libs),)
coreandstub_components  += IceBT
endif

#
# Build all the projects with the shared configuration, except IceUtil and Slice
# that are static-only
#
shared_projects         = %
shared_excludes         = IceUtil Slice

#
# Build only few components with the static configuration (core and stubs)
#
static_components       = $(coreandstub_components)
static_projects         = test/Common \
                          test/Ice/% \
                          test/IceSSL/% \
                          test/IceUtil/stacktrace \
                          test/IceDiscovery/simple \
                          test/Glacier2/application \
                          test/IceGrid/simple

static_excludes         = test/Ice/library test/Ice/plugin

#
# If building on a Linux multilib platform, we restrict what we build for the 32-bits architecture.
#
ifeq ($(multilib-platform),yes)
x86_components          = $(coreandstub_components) DataStorm IceDB IceStormService icebox
x86_projects            = test/%
endif

#
# $(call make-cpp-src-project,$1=project)
#
define make-cpp-src-project
$1_slicecompiler        := slice2cpp
$1_sliceflags           += -I$(slicedir)
$1_cppflags             += -I$1/generated -I$(includedir) -I$(includedir)/generated
$(make-project)
endef

#
# $(call make-cpp-doxygen-example-project,$1=project)
#
define make-cpp-doxygen-example-project
$1_slicecompiler        := slice2cpp
$1_sliceflags           += -I$(slicedir)
$1_cppflags             += -I$(includedir) -I$(includedir)/generated
$(make-project)
endef

#
# $(call make-cpp-test-project,$1=project)
#
define make-cpp-test-project
$1_slicecompiler        := slice2cpp
$1_sliceflags           += -I$(slicedir)
$1_cppflags             += -I$1/generated -Itest/include $(ice_cpp_cppflags)
$(make-project)
endef

#
# $(create-cpp-test-project $1=test)
#
define create-cpp-test-project
$1_srcext               := cpp
$1_dependencies         := $$(or $$($1_dependencies),TestCommon Ice)

# Dependencies and target dirs for iOS test project
$1[iphoneos-static]_targetdir                 := test/ios/bundles/Bundles-iphoneos/$(subst /,_,$1)
$1[iphonesimulator-static]_targetdir          := test/ios/bundles/Bundles-iphonesimulator/$(subst /,_,$1)

$(create-test-project)
endef

#
# Create top-level include/config dir
#
$(DESTDIR)$(install_includedir) $(DESTDIR)$(install_configdir):
	$(Q)$(MKDIR) $@
